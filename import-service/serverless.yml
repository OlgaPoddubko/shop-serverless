service: import-service
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs18.x
  stage: dev
  environment:
    BUCKET_NAME: import-service-gt

  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:ListBucket
      Resource:
        - "arn:aws:s3:::import-service-gt"
    - Effect: Allow
      Action:
        - s3:*
      Resource:
        - "arn:aws:s3:::import-service-gt/*"

functions:
  importProductsFile:
    handler: lambda/importProductsFile.importProductsFile
    events:
      - http:
          path: /import
          method: get
          cors: true
          request:
            parameters:
              querystrings:
                name: true
  importFileParser:
    handler: lambda/importFileParser.importFileParser
    events:
      - s3:
          bucket: ${self:provider.environment.BUCKET_NAME}
          event: s3:ObjectCreated:*
          rules:
            - prefix: uploaded/
          existing: true

custom:
  stage: ${opt:stage, self:provider.stage}

resources:
  Resources:
    S3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: ${self:provider.environment.BUCKET_NAME}
        PolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                AWS: "*"
              Action: "s3:GetObject"
              Resource: "arn:aws:s3:::import-service-gt/uploaded/*"

  Outputs:
    importApiGatewayRestApiId:
      Value:
        Ref: ApiGatewayRestApi
      Export:
        Name: ${self:custom.stage}-ApiGatewayRestApiId

    importApiGatewayRestApiRootResourceId:
      Value:
        Fn::GetAtt:
          - ApiGatewayRestApi
          - RootResourceId
      Export:
        Name: ${self:custom.stage}-ApiGatewayRestApiRootResourceId

