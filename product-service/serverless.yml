service: product-service
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs18.x
  stage: dev
  region: eu-west-1
  environment:
    PRODUCTS_TABLE_NAME: products
    STOCK_TABLE_NAME: stock
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:DescribeTable
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: "arn:aws:dynamodb:eu-west-1:*:table/*"

functions:
  getProductsList:
    handler: lambda/getProductsList.getProductsList
    events:
      - http:
         path: products
         method: get

  getProductsById:
    handler: lambda/getProductsById.getProductsById
    events:
      - http:
         path: products/{id}
         method: get

  createProduct:
    handler: lambda/createProduct.createProduct
    events:
      - http:
          path: /products
          method: post
          cors: true

resources:
  Resources:
    ProductsTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:provider.environment.PRODUCTS_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    StockTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:provider.environment.STOCK_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: product_id
            AttributeType: S
        KeySchema:
          - AttributeName: product_id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
